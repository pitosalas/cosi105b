---
title: Starting to think about scaling
desc: Sinatra, Service Oriented Architectures and scaling
cat: web
slides: true
---
:h2 Logistics

* Reminder of how participation homework works
* Thoughts about "Begin"
* Why were people asking about Gemfiles? What is a Gemfile?

:slide_bigtitle Walk through of a basic scenario

* Baseball scoring application - First cut
  * Millions of fans are constantly refreshing page to see current score in real time as the game progresses
  * A local official enters stats as the game progresses
  * Default implementation with a single "monolithic" app
  * How will things break down?
* Assuming:
  * variable t = total number of teams in this league (guess 100)
  * variable s = number of games happening simultaneously (guess: 4)
  * Given a scoreboard app written in Sinatra 
  * What is a good assumption for the number of times per second the page will refresh?

:slide_bigtitle Review of everything so far

1. What a web server is and how Sinatra helps you create one
1. Meaning of the URL
1. ActiveRecord as the bridge between Ruby and the relational database
1. The relationship between the client and the server
1. How Unit testing is done with Minitest/Spec et al.
1. The idea of Test Driven Development
1. HTTP and it's different Verbs like GET, PUT, POST etc.

:slide_bigtitle Non Scalable Architecture (good starting point)

:image :soa1

* A Web Server (aka App Server) runs your code. 
* That server is connected by network to a database server.
* There are background processes and they run on the same server
* Scaling it follows a path of least resistance

:slide_bigtitle Scalable Architecture (where you will end up)

:image :soa3

* As load becomes greater, capacity is added where it is needed
* A "load balancer" sends traffic to different servers
* A "cache service" like Redis reduces the number of requests to the database
* And background processes are also replicated over multiple servers
* This kind of configuration is typical of many sites
* But what happens when the database cannot carry the load by itself?
* Managing the monolithic code base itself also becomes a problem
* Test suites take longer to run.

:slide_bigtitle Getting from here to there

* It is natural to begin with a monolithic MVC design. This is true if you are implementing in Ruby/Sinatra, Ruby on Rails, Node or any other language.

:image :soa4

:slide_title A Service Oriented Architecture

* Some or all the models could be broken off into services, one model per service, or more likely, several models in one service.

:image :soa5

* This is just a start. We will build on this scheme and use this in NanoTwitter

:lecture_end
 
