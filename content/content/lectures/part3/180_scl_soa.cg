---
title: "SOA + Âµservices"
desc: Look at applications of microservices and SOA in building scalable systems. Consider risks and benefits.
cat: scale
slides: true
---
:h4 Logistics

* Secret code:
* Link to the rules and process for :topic_link :scalability_runoff
* Offer: Code Review

:topic_include :scaling_SOA

:slide_title Monolith

* What does a classic "Monolithic Web App" look like?
* Web Server - Processes HTTP and delivers it to app code (Puma + Sinatra, for example)
* App Server - (Your code, for example)
* Database Server - Postgres, Oracle, Mongo, etc.

:slide_title Advantages and Disadvantages

* Advantages
  1. Good for small-medium projects with similar teams
  1. Single code base
  1. Don't have to design, write, test, maintain service Apis
* Disadvatages
  1. If teams are large there can be too much coupling
  1.  Scaling out (if you need to) is very tough

:slide_title  Service Oriented Architecture

* Single application, designed as
  1. Suite of (small?) services
  1. Each running in a separate process
  1. Communicating with lightweight mechanisms
  1. Relying on internal REST Apis or Queues or Both
* Scaling up vs. Scaling out
* Beware of **premature optimization!**

:slide_title Conways law: Organize around business capabilities
:quote Any organization that designs a system (defined more broadly here than just information systems) will inevitably produce a design whose structure is a copy of the organization's communication structure" (see [Conway's Law](http://www.melconway.com/Home/Committees_Paper.html))

:slide_title Communication
* Trade-offs in communications between services
* "Smart endpoints and dumb pipes" - End to end principle
* What would "Smart pipes and dumb endpoints" mean? (see POTS)

:slide_title "Unix Philosophy"
1. Write programs that do one thing and do it well.
1. Write programs to work together.
1. Write programs to handle text streams, because that is a universal interface.

* **Unix Philosophy** (See [Wikipedia](https://en.wikipedia.org/wiki/Unix_philosophy)). Summarized by [Peter Salus](https://en.wikipedia.org/wiki/Peter_H._Salus): (not [Pito Salas](https://en.wikipedia.org/wiki/Pito_Salas)):

:source_begin :bash
ps aux | grep ruby | grep -v grep | ruby -n -e 'puts $_.split[1]' | xargs kill
:source_end

 * [Source of example](http://unix.stackexchange.com/questions/30759/whats-a-good-example-of-piping-commands-together)
 * [Using Ruby instead of Awk](http://nithinbekal.com/posts/ruby-sed-awk/)

:slide_title Famous (and valuable) Law: "Postel's Principle"

* Postel WROTE the early specification of TCP!
* Look at this [RFC #7](https://tools.ietf.org/html/std7). Wow!
* Often restated as the [Robustness Principle](https://en.wikipedia.org/wiki/Robustness_principle)
* Some people don't agree: [Postel's Principle is a Bad Idea](https://programmingisterrible.com/post/42215715657/postels-principle-is-a-bad-idea)

:slide_title Postel's Principle

:quote Postel's Principle: [designers] should follow a general principle of robustness: be conservative in what you do, be liberal in what you accept from others

:slide_title The Big Picture
:image :soa_diag_2

:slide_title Evolutionary Design

* Start with 1 big service (Majestic Monolith)
* Identify with practice what sub-component could be a service
* Keep things that change at the same time together in the same service (module)
* Horizontal Scalability
* Redundancy

:slide_title Once services are introduced

* Service discovery
* Errors and timeouts etc
* Load balancing (Smart client, Hardware, Software)
* System level caching: Redis
* Queueing

:slide_title Databases

* Monolith: one database with many tables
* Microservice: Separate and distinct databases, per service
* Shard or Partition

:slide_title Interfaces

* Internal implementation of service is irrelevant and isolated

:slide_title Benefits and Goals that are satisfied:

* Any service can be replaced by new code with (no/minimal) impact on other services
* Each service can be designed and tested independently from the others
* Failure in one service is kept isolated

:slide_title Things to think about

* Services need to be "discovered"
* Services can be offline (crashed)
* Permanently or temporarily
* Handling of errors and time-outs
* Monitoring and troubleshooting
* Disaster Recovery
* Timeouts on Services
* What does a timeout mean?
* Retrying with backoff
* [Circuit Breaker](http://martinfowler.com/bliki/CircuitBreaker.html)

:slide_title Scenario

* Service 1: Contains sinatra, processes http, displays forms etc.
* Service 2: Executes certain long running services (e.g. major data load), fed by a job queue
* Considering Service 3

:slide_title When user tweets, how do we get that into the database?

* Directly within Service 1
* In Service 2, as a job on a general queue
* In a new service 3, in a job queue, dedicated to tweets
* In a new service 3, in a publish/subscribe queue

:slide_title For Further Reading

* [Sinatra/Heroku Microservices](https://silkandspinach.net/2014/08/31/sinatraheroku-microservices/)
* [Linux Process Management: Commands you should know](http://www.hostingadvice.com/blog/linux-process-management-commands-know/)
* [Ruby One Liners](https://github.com/learnbyexample/Command-line-text-processing)
* [Architecting Apps as MicroServices](https://blog.codeship.com/architecting-rails-apps-as-microservices/)
* [How to do services in Heroku](https://www.rdegges.com/2014/heroku-and-soa/)
* Contrast with [Majestic Monolith](https://m.signalvnoise.com/the-majestic-monolith-29166d022228#.cm2vu12s8)


:lecture_end
